
%%

%eop EOF
%verbose
%pure
%name Expr

%term CONST of int
    | VAR of string
    | PLUS
    | MINUS
    | MUL
    | DIV
    | EOF
    | NEWLINE
    | SEMICOLON
    | IF | THEN | ELSE | LET | IN | END | BREAK | ASSIGNMENT | FOR | TO | DO | WHILE | EQUAL


%nonterm EXP     of Ast.Expr
       | EXPS    of Ast.Expr list
       | PROGRAM of Ast.Expr list
       | EXPR 	 of Ast.Expr
       | EQ	 of Ast.Expr	

%noshift EOF

%left PLUS MINUS
%left MUL DIV

%pos int

%%

PROGRAM : EXPS                 ( EXPS )
	| EXPS NEWLINE         ( EXPS )

EXPS    : (* empty *)           ( []            )
	| EXP NEWLINE EXPS      ( EXP :: EXPS   )
	| EXP EXPS		( EXP :: EXPS	)		
	| EXP SEMICOLON EXPS	( EXP :: EXPS	)

EXP     : IF EQ THEN EXP     		( Ast.IF EQ EXP )
	| ELSE EXP	       		( Ast.ELSE  EXP )
	| LET EXPS IN EXPS END		( Ast.LET EXPS1 EXPS2 )
	| BREAK				( Ast.Break	)
	| VAR ASSIGNMENT EXP		( Ast.ASSIGNMENT (Ast.Var VAR) EXP)
	| FOR VAR ASSIGNMENT EXPR TO EXPR DO EXP (Ast.FOR (Ast.Var VAR) EXPR1 EXPR2 EXP)
	| WHILE EQ DO EXP		( Ast.WHILE EQ EXP )

EXPR	: CONST                		( Ast.Const CONST 	)
	| VAR				( Ast.Var VAR 		)
        | EXPR PLUS EXPR         	( Ast.plus  EXPR1 EXPR2 )
	| EXPR MINUS EXPR        	( Ast.minus EXPR1 EXPR2 )
	| EXPR MUL   EXPR        	( Ast.mul   EXPR1 EXPR2 )
	| EXPR DIV   EXPR        	( Ast.div   EXPR1 EXPR2 )

EQ	: EXPR EQUAL EXPR		(Ast.EQUAL EXPR1 EXPR2)

(*
program ::=
    exp
  | decs

exp ::=
    nil
  | integer
  | string
  | type-id [ exp ] of exp
  | type-id {[ id = exp { , id = exp } ] }
  | new type-id
  | lvalue
  | id ( [ exp { , exp }] )
  | lvalue . id ( [ exp { , exp }] )
  | - exp
  | exp op exp
  | ( exps )
  | lvalue := exp
  | if exp then exp [else exp]
  | while exp do exp
  | for id := exp to exp do exp
  | break
  | let decs in exps end

lvalue ::= id
  | lvalue . id
  | lvalue [ exp ]

exps ::= [ exp { ; exp } ]

decs ::= { dec }

dec ::=
    type id = ty
  | class id [ extends type-id ] { classfields }
  | vardec
  | function id ( tyfields ) [ : type-id ] = exp
  | primitive id ( tyfields ) [ : type-id ]
  | import string


vardec ::= var id [ : type-id ] := exp


classfields ::= { classfield }

classfield ::=
    vardec
  | method id ( tyfields ) [ : type-id ] = exp

ty ::=
     type-id
   | { tyfields  }
   | array of type-id
   | class [ extends type-id ] { classfields }

tyfields ::= [ id : type-id { , id : type-id } ]

type-id ::= id

op ::= + | - | * | / | = | <> | > | < | >= | <= | & | |
*)

